# name: Release build

# on: 
#   push:
#     tags:
#       - v*


# jobs:
#   release: 
#     name: Release build
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout repo
#         uses: actions/checkout@v2

#       - name: setup node
#         uses: actions/setup-node@v3
#         with:
#           node-version: 16

#       - name: Install dependencies
#         run: |
#           npm install -g vsce
#           npm ci
#           npm install

#       - name: Run tests
#         uses: GabrielBB/xvfb-action@v1
#         with:
#           run: npm test

#       - name: package
#         uses: lannonbr/vsce-action@0f3391ee0477b08fae949eb0a875e91e6d20b075
#         with:
#           args: "package"

#       - name: get release version
#         id: release_version
#         run: |
#           TAGGED_VERSION="${GITHUB_REF/refs\/tags\/v/}"
#           if [[ ! "${TAGGED_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
#             echo "Invalid version tag '${TAGGED_VERSION}'"
#             exit 1
#           fi
#           echo "EXT_VERSION=${TAGGED_VERSION}" >> $GITHUB_ENV
#           WRITTEN_VERSION="$(cat package.json | jq '.version' -r)"
#           if [[ "${TAGGED_VERSION}" == *"-"* ]]; then
#             if [[ ! "${TAGGED_VERSION}" == "${WRITTEN_VERSION}"-rc.* ]]; then
#               echo "Prerelease Tag and Version in package.json are not compatible: '${TAGGED_VERSION}' vs '${WRITTEN_VERSION}'"
#               exit 1
#             fi
#             echo "EXT_ISPREVIEW=1" >> $GITHUB_ENV
#           else
#             if [[ "${TAGGED_VERSION}" != "${WRITTEN_VERSION}" ]]; then
#               echo "Release Tag and Version in package.json do not match: '${TAGGED_VERSION}' vs '${WRITTEN_VERSION}'"
#               exit 1
#             fi
#             echo "EXT_ISPREVIEW=0" >> $GITHUB_ENV
#           fi
#       - name: stamp version
#         run: |
#           cat package.json | jq --arg VER "${{ env.EXT_VERSION }}" '.version=$VER' > /tmp/package.json 
#           cp /tmp/package.json ./package.json
#           npm ci
#           npm install

#       - name: package
#         uses: lannonbr/vsce-action@0f3391ee0477b08fae949eb0a875e91e6d20b075
#         with:
#           args: "package"

#       - name: Release
#         uses: fnkr/github-action-ghr@v1
#         if: startsWith(github.ref, 'refs/tags/')
#         env:
#           GHR_COMPRESS: zip
#           GHR_PATH: ${{ github.workspace }}/*.vsix
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   
